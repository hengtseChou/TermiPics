#!/bin/bash
exec </dev/tty
cd "$(git rev-parse --show-toplevel)"

staged_files=$(git diff --cached --name-only --diff-filter=ACM)
staged_frontend=$(echo "$staged_files" | grep -E '^client/src/' | sed 's|^client/||' || true)
staged_backend=$(echo "$staged_files" | grep -E '^server/.*\.py$' | sed 's|^server/||' || true)

echo "[pre-commit] Running pre-commit hook"

if [ -n "$staged_frontend" ]; then
  echo "[pre-commit] Checking frontend code"
  cd client
  linter_output=$(npx eslint ${staged_frontend[@]} --fix)
  if [ -n "$linter_output" ]; then
    echo "[pre-commit] ESLint found issues below:"
    echo "$linter_output"
    read -p "[pre-commit] Would you like to abort the commit? (y/N) " answer
    answer=${answer:-N}
    if [[ "$answer" =~ ^[Yy]$ ]]; then
      echo "[pre-commit] Aborting"
      exit 1
    fi
  fi
  echo "[pre-commit] Formatting frontend code"
  npx prettier ${staged_frontend[@]} --write
  echo "[pre-commit] Staging formatted files"
  git add ${staged_frontend[@]}
  cd ..
fi

if [ -n "$staged_backend" ]; then
  echo "[pre-commit] Checking backend code"
  cd server
  linter_output=$(uv run ruff check ${staged_backend[@]} --fix --quiet)
  if [ -n "$linter_output" ]; then
    echo "[pre-commit] Ruff found issues below:"
    echo "$linter_output"
    read -p "[pre-commit] Would you like to abort the commit? (y/N) " answer
    answer=${answer:-N}
    if [[ "$answer" =~ ^[Yy]$ ]]; then
      echo "[pre-commit] Aborting"
      exit 1
    fi
  fi
  echo "[pre-commit] Formatting backend code"
  uv run ruff format ${staged_backend[@]}
  echo "[pre-commit] Staging formatted files"
  git add ${staged_backend[@]}
  cd ..
fi

echo "[pre-commit] Done"
